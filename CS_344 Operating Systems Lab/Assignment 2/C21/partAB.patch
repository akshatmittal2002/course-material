diff -ruN xv6-public/defs.h xv6-public-assign2-sjfs/defs.h
--- xv6-public/defs.h	2022-09-03 10:30:31.197427818 +0530
+++ xv6-public-assign2-sjfs/defs.h	2022-09-27 00:28:43.805254888 +0530
@@ -8,6 +8,7 @@
 struct spinlock;
 struct sleeplock;
 struct stat;
+struct processInfo;
 struct superblock;
 
 // bio.c
@@ -121,6 +122,13 @@
 void            wakeup(void*);
 void            yield(void);
 
+// assignmnet 2A
+int             getNumProc(void);
+int             getMaxPid(void);
+int             getProcInfo(int, struct processInfo*);
+int             set_burst_time(int);
+int             get_burst_time(void);
+
 // swtch.S
 void            swtch(struct context**, struct context*);
 
diff -ruN xv6-public/getMaxPid.c xv6-public-assign2-sjfs/getMaxPid.c
--- xv6-public/getMaxPid.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-assign2-sjfs/getMaxPid.c	2022-09-26 20:08:40.269535155 +0530
@@ -0,0 +1,14 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void)
+{
+	int mpid = getMaxPid();
+	if(mpid < 0)
+	{
+		printf(1, "No active processes in process table.\n");
+	}
+	else printf(1, "Maximum PID: %d\n", mpid);
+	exit();
+}
diff -ruN xv6-public/getNumProc.c xv6-public-assign2-sjfs/getNumProc.c
--- xv6-public/getNumProc.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-assign2-sjfs/getNumProc.c	2022-09-26 20:09:08.190774190 +0530
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(void)
+{
+	printf(1, "Number of currently active processes: %d\n", getNumProc());
+	exit();
+}
diff -ruN xv6-public/getProcInfo.c xv6-public-assign2-sjfs/getProcInfo.c
--- xv6-public/getProcInfo.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-assign2-sjfs/getProcInfo.c	2022-09-27 00:26:08.022584481 +0530
@@ -0,0 +1,30 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main(int argc, char *argv[])
+{	
+	if(argc < 2){
+    	  printf(2, "Usage: getProcInfo...\n");
+    	  exit();
+  	}
+  	
+  	for(int i=1; i<argc; i++)
+  	{
+  		struct processInfo* ptr;
+  		ptr = (struct processInfo*) malloc(sizeof(struct processInfo));
+  		
+  		if(getProcInfo(atoi(argv[i]), ptr) < 0)
+  		{
+  			printf(2, "getProcInfo: %s failed\n", argv[i]);
+  			break;
+  		}
+  		
+  		printf(1, "Parent PID: %d\n", ptr->ppid);
+  		printf(1, "Process Size: %d\n", ptr->psize);
+  		printf(1, "Context Switches: %d\n", ptr->numberContextSwitches);
+  	}
+  	
+  	exit();
+}
diff -ruN xv6-public/Makefile xv6-public-assign2-sjfs/Makefile
--- xv6-public/Makefile	2022-09-03 10:30:31.197427818 +0530
+++ xv6-public-assign2-sjfs/Makefile	2022-09-27 00:29:03.583252122 +0530
@@ -181,6 +181,12 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_getNumProc\
+	_getMaxPid\
+	_getProcInfo\
+	_set_burst_time\
+	_testSched1\
+	_testSched2\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff -ruN xv6-public/param.h xv6-public-assign2-sjfs/param.h
--- xv6-public/param.h	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-assign2-sjfs/param.h	2022-09-27 01:07:53.925376616 +0530
@@ -1,6 +1,6 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
-#define NCPU          8  // maximum number of CPUs
+#define NCPU          1  // maximum number of CPUs
 #define NOFILE       16  // open files per process
 #define NFILE       100  // open files per system
 #define NINODE       50  // maximum number of active i-nodes
@@ -11,4 +11,3 @@
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       1000  // size of file system in blocks
-
diff -ruN xv6-public/proc.c xv6-public-assign2-sjfs/proc.c
--- xv6-public/proc.c	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-assign2-sjfs/proc.c	2022-10-07 20:15:43.290521915 +0530
@@ -6,6 +6,7 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "processInfo.h"
 
 struct {
   struct spinlock lock;
@@ -88,6 +89,8 @@
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  p->contextswitches = 0;
+  p->burst = 0;
 
   release(&ptable.lock);
 
@@ -326,32 +329,86 @@
   struct cpu *c = mycpu();
   c->proc = 0;
   
-  for(;;){
+  // // Round robin scheduling algorithm
+  // for(;;){
+  //   // Enable interrupts on this processor.
+  //   sti();
+
+  //   // Loop over process table looking for process to run.
+  //   acquire(&ptable.lock);
+  //   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+  //     if(p->state != RUNNABLE)
+  //       continue;
+
+  //     // Switch to chosen process.  It is the process's job
+  //     // to release ptable.lock and then reacquire it
+  //     // before jumping back to us.
+  //     c->proc = p;
+  //     switchuvm(p);
+  //     p->state = RUNNING;
+
+  //     swtch(&(c->scheduler), p->context);
+  //     // increment number of context switches
+  //     p->contextswitches = p->contextswitches + 1;
+  //     switchkvm();
+
+  //     // Process is done running for now.
+  //     // It should have changed its p->state before coming back.
+  //     c->proc = 0;
+  //   }
+  //   release(&ptable.lock);
+
+  // }
+
+  // Shortest job first scheduling algorithm
+  while(1){
     // Enable interrupts on this processor.
     sti();
+    // To store the job with least burst time
+    struct proc *shortest_job = 0;
 
-    // Loop over process table looking for process to run.
-    acquire(&ptable.lock);
-    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
-      if(p->state != RUNNABLE)
-        continue;
-
-      // Switch to chosen process.  It is the process's job
-      // to release ptable.lock and then reacquire it
-      // before jumping back to us.
-      c->proc = p;
-      switchuvm(p);
-      p->state = RUNNING;
-
-      swtch(&(c->scheduler), p->context);
-      switchkvm();
-
-      // Process is done running for now.
-      // It should have changed its p->state before coming back.
-      c->proc = 0;
+    // Acquire process table lock
+		acquire(&ptable.lock);
+		// Find the job with least burst time
+    for (p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    {
+      if (p->state == RUNNABLE)
+      {
+        if (!shortest_job)
+        {
+          shortest_job = p;
+        }
+        else if (p->burst < shortest_job->burst)
+        {
+          shortest_job = p;
+        }
+      }
     }
-    release(&ptable.lock);
+    
+    if (!shortest_job)
+    {
+      release(&ptable.lock);
+      continue;
+    }
+
+    p = shortest_job;
 
+    // Switch to chosen process.  It is the process's job
+    // to release ptable.lock and then reacquire it
+    // before jumping back to us.
+    c->proc = p;
+    switchuvm(p);
+    p->state = RUNNING;
+
+    swtch(&(c->scheduler), p->context);
+    // increment number of context switches
+    p->contextswitches = p->contextswitches + 1;
+    switchkvm();
+
+    // Process is done running for now.
+    // It should have changed its p->state before coming back.
+    c->proc = 0;
+    release(&ptable.lock);
   }
 }
 
@@ -532,3 +589,82 @@
     cprintf("\n");
   }
 }
+
+// assignment 2A
+// get total number of active processes in system
+int
+getNumProc(void)
+{
+	struct proc *p;
+
+	int count = 0;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED)
+    	continue;
+    else
+      count++;
+    // cprintf("%d\n",p->pid);
+  }
+  release(&ptable.lock);
+  return count;
+}
+
+// get the maximum PID among the PIDs of all currently active processes
+int
+getMaxPid(void)
+{
+	struct proc *p;
+
+	int max = -1;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED)
+      continue;
+    if(p->pid > max)
+      max = p->pid;
+  }
+  release(&ptable.lock);
+  return max;
+}
+
+// get info about the process having given PID
+int
+getProcInfo(int pid, struct processInfo* st)
+{
+	struct proc *p;
+	int flag = -1;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->pid == pid)
+    {
+    	st->ppid = 0;
+    	// check if parent exists
+      if(p->parent != 0)
+        st->ppid = p->parent->pid;
+      st->psize = p->sz;
+      st->numberContextSwitches = p->contextswitches;
+			flag = 0;
+    	break;
+    }
+  }
+  release(&ptable.lock);
+  return flag;
+}
+
+// set burst time for a process
+int
+set_burst_time(int bt)
+{
+	myproc()->burst = bt;
+  // cprintf("%d\n",myproc()->pid);
+	// skip one CPU scheduling round.
+	yield();
+	return 0;
+}
+
+int
+get_burst_time(void)
+{
+  return myproc()->burst;
+}
\ No newline at end of file
diff -ruN xv6-public/processInfo.h xv6-public-assign2-sjfs/processInfo.h
--- xv6-public/processInfo.h	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-assign2-sjfs/processInfo.h	2020-06-11 23:52:40.000000000 +0530
@@ -0,0 +1,6 @@
+struct processInfo
+{
+    int ppid;
+    int psize;
+    int numberContextSwitches;
+};
diff -ruN xv6-public/proc.h xv6-public-assign2-sjfs/proc.h
--- xv6-public/proc.h	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-assign2-sjfs/proc.h	2022-10-06 20:01:45.341673941 +0530
@@ -49,6 +49,9 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  // For shortest job first scheduling
+  int contextswitches;		     // store number of context switches
+  int burst;			             // store approximate burst time
 };
 
 // Process memory is laid out contiguously, low addresses first:
Binary files xv6-public/_setBurstTime and xv6-public-assign2-sjfs/_setBurstTime differ
diff -ruN xv6-public/set_burst_time.c xv6-public-assign2-sjfs/set_burst_time.c
--- xv6-public/set_burst_time.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-assign2-sjfs/set_burst_time.c	2022-09-27 00:29:59.809286281 +0530
@@ -0,0 +1,25 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main(int argc, char* argv[])
+{
+
+	if(argc < 2)
+	{
+		printf(2, "Usage: setBurstTime...\n");
+    	  	exit();
+    	}
+    	
+    	int n = atoi(argv[1]);
+    	
+    	if(set_burst_time(n) < 0)
+    	{
+    		printf(2, "setBurstTime failed\n");
+		exit();
+	}
+	
+	printf(1, "Burst Time set to %d.\n", get_burst_time());
+	
+	exit();
+}	
diff -ruN xv6-public/syscall.c xv6-public-assign2-sjfs/syscall.c
--- xv6-public/syscall.c	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-assign2-sjfs/syscall.c	2022-09-26 20:17:58.572468697 +0530
@@ -103,6 +103,12 @@
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+// assignment 2A
+extern int sys_getNumProc(void);
+extern int sys_getMaxPid(void);
+extern int sys_getProcInfo(void);
+extern int sys_set_burst_time(void);
+extern int sys_get_burst_time(void);
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +132,12 @@
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+// assignment 2A
+[SYS_getNumProc]   sys_getNumProc,
+[SYS_getMaxPid]   sys_getMaxPid,
+[SYS_getProcInfo]   sys_getProcInfo,
+[SYS_set_burst_time]   sys_set_burst_time,
+[SYS_get_burst_time]   sys_get_burst_time
 };
 
 void
diff -ruN xv6-public/syscall.h xv6-public-assign2-sjfs/syscall.h
--- xv6-public/syscall.h	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-assign2-sjfs/syscall.h	2022-09-26 20:18:12.828896962 +0530
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_getNumProc  22
+#define SYS_getMaxPid  23
+#define SYS_getProcInfo 24
+#define SYS_set_burst_time  25
+#define SYS_get_burst_time  26
diff -ruN xv6-public/sysproc.c xv6-public-assign2-sjfs/sysproc.c
--- xv6-public/sysproc.c	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-assign2-sjfs/sysproc.c	2022-09-27 00:29:53.379335321 +0530
@@ -89,3 +89,46 @@
   release(&tickslock);
   return xticks;
 }
+
+// assignment 2A
+int
+sys_getNumProc(void)
+{
+	return getNumProc();
+}
+
+int
+sys_getMaxPid(void)
+{
+  return getMaxPid();
+}
+
+int
+sys_getProcInfo(void)
+{
+	int pid;
+	struct processInfo* st;
+	if(argint(0, &pid) < 0)
+    return -1;
+  if(argptr(1, (void*)&st, sizeof(st)) < 0)
+    return -1;
+  return getProcInfo(pid, st);
+}
+
+int
+sys_set_burst_time()
+{   
+  int bt;
+  if(argint(0, &bt) < 0)
+    return -1;
+  if(bt <= 0)
+  	return -1;
+  set_burst_time(bt);
+  return 0;
+}
+
+int
+sys_get_burst_time(void)
+{
+  return get_burst_time();
+}
\ No newline at end of file
diff -ruN xv6-public/testSched1.c xv6-public-assign2-sjfs/testSched1.c
--- xv6-public/testSched1.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-assign2-sjfs/testSched1.c	2022-10-07 20:10:40.975799226 +0530
@@ -0,0 +1,61 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#include "processInfo.h"
+
+int main()
+{	
+	// array containing burst times
+	int t[10] = {100, 90, 80, 70, 60, 50, 40, 30, 20, 10};
+	int x = 0;
+	set_burst_time(1);
+	for(int i=0; i<10; i++)
+	{
+		// Fork process
+		if(fork() != 0)
+		{
+			continue;
+		}
+
+		// Set burst time
+		x = set_burst_time(t[i]);
+		if(x < 0)
+		{
+			printf(1, "Could not set burst time for process %d!\n", getpid());
+		}
+		
+		// IO bound process
+		if(i < 4)
+		{
+			// mimicking IO wait
+			for(int i2=0; i2<t[i]*10; i2++)
+			{
+				sleep(1);
+			}
+			printf(1, "(%d) IO Bound\t", i+1);
+		}
+		
+		// CPU bound process
+		else
+		{
+			double y = 0;
+			// code to add delay
+			for(int i2=0; i2<t[i]*500000; i2++)
+			{
+				y += 2.69 * 13.01;
+			}
+			x = y;
+			printf(1, "(%d) CPU Bound(%d)\t", i+1, x);	
+		}
+		
+		x = get_burst_time();
+		// Collect process info
+		struct processInfo *info;
+		info = (struct processInfo*) malloc(sizeof(struct processInfo));
+		getProcInfo(getpid(), info);
+		printf(1, "Burst Time: %d\tContext Switches: %d\n", x, info->numberContextSwitches);
+		exit();
+	}
+	while(wait() != -1);
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public/testSched2.c xv6-public-assign2-sjfs/testSched2.c
--- xv6-public/testSched2.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-assign2-sjfs/testSched2.c	2022-10-07 20:10:21.387151545 +0530
@@ -0,0 +1,61 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+#include "processInfo.h"
+int main()
+{	
+	// array containing burst times
+	int t[10] = {40, 70, 10, 90, 60, 30, 20, 80, 100, 50};
+	long x = 0;
+	set_burst_time(1);
+	for(int i=0; i<10; i++)
+	{
+		// Fork process
+		if(fork() != 0)
+		{
+			continue;
+		}
+
+		// Set burst time
+		x = set_burst_time(t[i]);
+		if(x < 0)
+		{
+			printf(1, "Could not set burst time for process %d!\n", getpid());
+		}
+		
+		// IO bound process
+		if(i % 3 == 0)
+		{
+			// mimicking IO wait
+			for(int i2=0; i2<t[i]*10; i2++)
+			{
+				sleep(1);
+			}
+			printf(1, "(%d) IO Bound\t", i+1);
+		}
+		
+		// CPU bound process
+		else
+		{
+			double y = 0;
+			// code to add delay
+			for(int i2=0; i2<t[i]*500000; i2++)
+			{
+				y += 2.69 * 13.01;
+			}
+			x = y;
+			printf(1, "(%d) CPU Bound(%d)\t", i+1, x);	
+		}
+		
+		x = get_burst_time();
+		// Collect process info
+		struct processInfo *info;
+		info = (struct processInfo*) malloc(sizeof(struct processInfo));
+		getProcInfo(getpid(), info);
+		printf(1, "Burst Time: %d\tContext Switches: %d\n", x, info->numberContextSwitches);
+		exit();
+	}
+	while(wait() != -1);
+	exit();
+}
\ No newline at end of file
diff -ruN xv6-public/trap.c xv6-public-assign2-sjfs/trap.c
--- xv6-public/trap.c	2022-09-03 10:30:31.205254858 +0530
+++ xv6-public-assign2-sjfs/trap.c	2022-10-07 20:15:47.194735130 +0530
@@ -102,9 +102,11 @@
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
-  if(myproc() && myproc()->state == RUNNING &&
-     tf->trapno == T_IRQ0+IRQ_TIMER)
-    yield();
+
+  // // Comment it out for shortest job first scheduling algorithm
+  // if(myproc() && myproc()->state == RUNNING &&
+  //    tf->trapno == T_IRQ0+IRQ_TIMER)
+  //   yield();
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
diff -ruN xv6-public/user.h xv6-public-assign2-sjfs/user.h
--- xv6-public/user.h	2022-09-03 10:30:31.205254858 +0530
+++ xv6-public-assign2-sjfs/user.h	2022-10-06 20:04:01.974078430 +0530
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct processInfo;
 
 // system calls
 int fork(void);
@@ -24,6 +25,13 @@
 int sleep(int);
 int uptime(void);
 
+// Assignment 2A
+int getNumProc(void);
+int getMaxPid(void);
+int getProcInfo(int pid, struct processInfo*);
+int set_burst_time(int n);
+int get_burst_time(void);
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff -ruN xv6-public/usys.S xv6-public-assign2-sjfs/usys.S
--- xv6-public/usys.S	2022-09-03 10:30:31.205254858 +0530
+++ xv6-public-assign2-sjfs/usys.S	2022-10-06 20:04:25.876700231 +0530
@@ -29,3 +29,8 @@
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(getNumProc)
+SYSCALL(getMaxPid)
+SYSCALL(getProcInfo)
+SYSCALL(set_burst_time)
+SYSCALL(get_burst_time)
