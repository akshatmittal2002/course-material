diff -ruN xv6-public/defs.h xv6-public-3B/defs.h
--- xv6-public/defs.h	2022-09-03 10:30:31.197427818 +0530
+++ xv6-public-3B/defs.h	2022-10-31 17:46:54.087500604 +0530
@@ -120,6 +120,13 @@
 int             wait(void);
 void            wakeup(void*);
 void            yield(void);
+// Assign 3
+void            create_kernel_process(const char *name, void (*entrypoint)());
+void            req_swapin(void);
+void            req_swapout(void);
+void            swapout_proc();
+void            swapin_proc();
+void            delete_page_files();
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -185,6 +192,9 @@
 void            switchkvm(void);
 int             copyout(pde_t*, uint, void*, uint);
 void            clearpteu(pde_t *pgdir, char *uva);
+// Assign 3
+uint*           getpte(pde_t *pgdir, const void *va);
+void            swapInMap(pde_t *pgdir, void *va, uint size, uint pa);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
diff -ruN xv6-public/file.h xv6-public-3B/file.h
--- xv6-public/file.h	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-3B/file.h	2022-10-30 00:36:23.595578243 +0530
@@ -6,6 +6,7 @@
   struct pipe *pipe;
   struct inode *ip;
   uint off;
+  char name[14];  // Filename 
 };
 
 
@@ -34,4 +35,4 @@
 
 extern struct devsw devsw[];
 
-#define CONSOLE 1
+#define CONSOLE 1
\ No newline at end of file
diff -ruN xv6-public/kalloc.c xv6-public-3B/kalloc.c
--- xv6-public/kalloc.c	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-3B/kalloc.c	2022-10-31 18:06:43.923355916 +0530
@@ -87,6 +87,15 @@
   if(kmem.use_lock)
     acquire(&kmem.lock);
   r = kmem.freelist;
+  // Until free frame not found, submit a request to swap-out process for a page
+  while (!r) {
+    if (kmem.use_lock)
+      release(&kmem.lock);
+    req_swapout();
+    if (kmem.use_lock)
+      acquire(&kmem.lock);
+    r = kmem.freelist;
+  }
   if(r)
     kmem.freelist = r->next;
   if(kmem.use_lock)
diff -ruN xv6-public/Makefile xv6-public-3B/Makefile
--- xv6-public/Makefile	2022-09-03 10:30:31.197427818 +0530
+++ xv6-public-3B/Makefile	2022-10-30 01:15:07.612757981 +0530
@@ -181,6 +181,7 @@
 	_usertests\
 	_wc\
 	_zombie\
+	_test\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff -ruN xv6-public/memlayout.h xv6-public-3B/memlayout.h
--- xv6-public/memlayout.h	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-3B/memlayout.h	2022-10-30 00:52:40.893013139 +0530
@@ -1,7 +1,8 @@
 // Memory layout
 
 #define EXTMEM  0x100000            // Start of extended memory
-#define PHYSTOP 0xE000000           // Top physical memory
+// Decreased from 0xE00000 to 0x400000 so as to increase page replacement rate
+#define PHYSTOP 0x400000           // Top physical memory
 #define DEVSPACE 0xFE000000         // Other devices are at high addresses
 
 // Key addresses for address space layout (see kmap in vm.c for layout)
diff -ruN xv6-public/param.h xv6-public-3B/param.h
--- xv6-public/param.h	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-3B/param.h	2022-10-30 00:36:56.987462555 +0530
@@ -1,14 +1,13 @@
 #define NPROC        64  // maximum number of processes
 #define KSTACKSIZE 4096  // size of per-process kernel stack
 #define NCPU          8  // maximum number of CPUs
-#define NOFILE       16  // open files per process
-#define NFILE       100  // open files per system
-#define NINODE       50  // maximum number of active i-nodes
+#define NOFILE      128  // open files per process
+#define NFILE       128  // open files per system
+#define NINODE      128  // maximum number of active i-nodes
 #define NDEV         10  // maximum major device number
 #define ROOTDEV       1  // device number of file system root disk
 #define MAXARG       32  // max exec arguments
 #define MAXOPBLOCKS  10  // max # of blocks any FS op writes
 #define LOGSIZE      (MAXOPBLOCKS*3)  // max data blocks in on-disk log
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
-#define FSSIZE       1000  // size of file system in blocks
-
+#define FSSIZE       128*128*16  // size of file system in blocks
\ No newline at end of file
diff -ruN xv6-public/proc.c xv6-public-3B/proc.c
--- xv6-public/proc.c	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-3B/proc.c	2022-10-31 22:35:46.168987141 +0530
@@ -6,6 +6,12 @@
 #include "x86.h"
 #include "proc.h"
 #include "spinlock.h"
+#include "sleeplock.h"
+#include "fs.h"
+#include "file.h"
+#include "stat.h"
+#include "fcntl.h"
+#include <stdbool.h>
 
 struct {
   struct spinlock lock;
@@ -20,10 +26,632 @@
 
 static void wakeup1(void *chan);
 
+// This function create a kernel process and add it to the processes queue.
+void
+create_kernel_process(const char *name, void (*entrypoint)()){
+  char *sp;
+  struct proc *p;
+
+  acquire(&ptable.lock);
+
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
+    if(p->state == UNUSED)
+      goto found;
+
+  release(&ptable.lock);
+  return;
+
+found:
+  p->state = EMBRYO;
+  p->pid = nextpid++;
+
+  release(&ptable.lock);
+
+  // Allocate kernel stack.
+  p->kstack = kalloc();
+  if (p->kstack == 0)
+  {
+    p->state = UNUSED;
+    return;
+  }
+  sp = p->kstack + KSTACKSIZE;
+
+  // Leave room for trap frame.
+  sp -= sizeof *p->tf;
+  p->tf = (struct trapframe*) sp;
+
+  // Set up new context to start executing at forkret,
+  // which returns to trapret.
+  sp -= 4;
+  *(uint*)sp = (uint)exit; // end the kernel process upon return from entrypoint()
+
+  sp -= sizeof *p->context;
+  p->context = (struct context*)sp;
+  memset(p->context, 0, sizeof *p->context);
+  (p->context)->eip = (uint)entrypoint;
+
+  if((p->pgdir = setupkvm()) == 0)
+    panic("kernel process: out of memory?");
+
+  p->sz = PGSIZE;
+  p->parent = initproc;
+  p->cwd = idup(initproc->cwd);
+
+  safestrcpy(p->name, name, sizeof(p->name));
+
+  acquire(&ptable.lock);
+  p->state = RUNNABLE;
+  release(&ptable.lock);
+  return;
+}
+
+// Circular Queue ADT
+struct swapqueue{
+  int front, rear;              // To indidicate start and end
+  int size;                     // Size of queue
+  char* reqchan;                // Channel on which requesting processes for swapping-out/in a page waits
+  char* qchan;                  // Channel on which swapout/swapin function waits if no process to serve
+  struct spinlock lock;         // Lock to protect shared access
+  struct proc* queue[NPROC+1];  // Queue storing PCB of the processes queued for swapping-out/in requests
+};
+
+// Enqueue function for the queue
+void
+enqueue(struct swapqueue* sq, struct proc* np){
+  if(sq->size == NPROC)
+    return;
+  sq->rear = (sq->rear + 1) % NPROC;
+  sq->queue[sq->rear] = np;
+  sq->size++;  
+}
+
+// Dequeue function for the queue
+struct proc*
+dequeue(struct swapqueue* sq){
+  if (sq->size == 0)
+    return 0;
+  struct proc* res = sq->queue[sq->front]; 
+  sq->front = (sq->front + 1) % NPROC; 
+  sq->size--;
+  if(sq->size == 0){
+    sq->front = 0;
+    sq->rear = NPROC - 1;
+  }
+  return res; 
+}
+
+// To store victim frames
+struct victim{
+  pte_t* pte;
+  struct proc* pr;
+  uint va; 
+};
+
+// Limit on number of files
+extern int flimit;
+int flimit;
+
+// Separate queues for swap-out and swap-in
+extern struct swapqueue swap_out_queue, swap_in_queue;
+struct swapqueue swap_out_queue, swap_in_queue;
+
+// Count for number of swap out and swap in
+int swapoutcount, swapincount;
+
+// Inbuilt function to allocate fd; present in sysfile.c
+int
+fdalloc(struct file *f){
+  int fd;
+  struct proc *curproc = myproc();
+
+  for(fd = 0; fd < NOFILE; fd++){
+    if(curproc->ofile[fd] == 0){
+      curproc->ofile[fd] = f;
+      return fd;
+    }
+  }
+  return -1;
+}
+
+// Inbuilt function to create a file with given name; present in sysfile.c
+struct inode*
+create(char *path, short type, short major, short minor)  
+{
+  struct inode *ip, *dp;
+  char name[DIRSIZ];
+
+  if((dp = nameiparent(path, name)) == 0)
+    return 0;
+  ilock(dp);
+
+  if((ip = dirlookup(dp, name, 0)) != 0){
+    iunlockput(dp);
+    ilock(ip);
+    if(type == T_FILE && ip->type == T_FILE)
+      return ip;
+    iunlockput(ip);
+    return 0;
+  }
+
+  if((ip = ialloc(dp->dev, type)) == 0)
+    panic("create: ialloc");
+
+  ilock(ip);
+  ip->major = major;
+  ip->minor = minor;
+  ip->nlink = 1;
+  iupdate(ip);
+
+  if(type == T_DIR){  // Create . and .. entries.
+    dp->nlink++;  // for ".."
+    iupdate(dp);
+    // No ip->nlink++ for ".": avoid cyclic ref count.
+    if(dirlink(ip, ".", ip->inum) < 0 || dirlink(ip, "..", dp->inum) < 0)
+      panic("create dots");
+  }
+
+  if(dirlink(dp, name, ip->inum) < 0)
+    panic("create: dirlink");
+
+  iunlockput(dp);
+
+  return ip;
+}
+
+// Inbuilt function to open a file; present in sysfile.c
+int
+open_file(char *path, int omode) {  
+  int fd;
+  struct file *f;
+  struct inode *ip;
+
+  begin_op();
+
+  if(omode & O_CREATE){
+    ip = create(path, T_FILE, 0, 0);
+    if(ip == 0){
+      end_op();
+      return -1;
+    }
+  } else {
+    if((ip = namei(path)) == 0){
+      end_op();
+      return -1;
+    }
+    ilock(ip);
+    if(ip->type == T_DIR && omode != O_RDONLY){
+      iunlockput(ip);
+      end_op();
+      return -1;
+    }
+  }
+
+  if((f = filealloc()) == 0 || (fd = fdalloc(f)) < 0){
+    if(f)
+      fileclose(f);
+    iunlockput(ip);
+    end_op();
+    return -1;
+  }
+  iunlock(ip);
+  end_op();
+
+  f->type = FD_INODE;
+  f->ip = ip;
+  f->off = 0;
+  f->readable = !(omode & O_WRONLY);
+  f->writable = (omode & O_WRONLY) || (omode & O_RDWR);
+  strncpy(f->name, path, 14);
+  return fd;
+}
+
+
+// Create name string from PID and VA[32:13]; will return PID_VA[32:13] as the name
+void
+get_name(int pid, uint addr, char *name) {
+  int i = 0;
+  while (pid){
+    name[i++] = '0' + (pid%10);
+    pid = pid/10;
+  }
+  int mid = i;
+  
+  name[i++] = '_';
+  
+  if(addr==0){
+    name[i++]='0';
+  }
+  while (addr){
+    name[i++] = '0' + (addr%10);
+    addr = addr/10;
+  }
+  
+  name[i++] = '.';
+  name[i++] = 's';
+  name[i++] = 'w';
+  name[i++] = 'p';
+  name[i] = 0;
+
+  char temp;
+  for(int j=0; j<mid/2; j++){
+    temp = name[j];
+    name[j] = name[mid-j-1];
+    name[mid-j-1] = temp;
+  }
+
+  for(int j=mid+1, k=i-5; j<k; j++, k--){
+    temp = name[j];
+    name[j] = name[k];
+    name[k] = temp;
+  }
+}
+
+// Writes a page into the swapout file
+int
+write_page(int pid, uint addr, char *buf){
+  
+  flimit++;
+
+  char name[14];
+  get_name(pid, addr, name);
+  
+  int fd = open_file(name, O_CREATE|O_WRONLY);  // Open + create file 
+  struct file *f;
+  if(fd < 0 || fd >= NOFILE || (f = myproc()->ofile[fd]) == 0)
+    return -1;
+  
+  // cprintf("Creating page file: %s\n", name);
+  char my_pid[3], my_va[3];
+  int va = (int) addr;
+
+  my_pid[2] = 0;
+  my_pid[1] = '0' + pid % 10;
+  my_pid[0] = (pid / 10 ? '0' + pid / 10 : ' ');
+
+  my_va[2] = 0;
+  my_va[1] = '0' + va%10;
+  my_va[0] = (va / 10 ? '0' + va / 10 : ' ');
+
+  if (my_va[0] == ' ')
+    cprintf("|    Page File Creation     |  %s | %s |      Contents of page %s saved in %s        |\n", my_pid, my_va, my_va, name);
+  else
+    cprintf("|    Page File Creation     |  %s | %s |      Contents of page %s saved in %s       |\n", my_pid, my_va, my_va, name);
+
+  int noc = filewrite(f, buf, 4096); // Write the page in the file
+  if (noc < 0)
+    cprintf("Unable to write. Exiting (paging.c::write_page)!!");
+  
+  swapoutcount++;
+  return noc;
+}
+
+// Deletes swapout file with the given filename; present in sysfile.c
+int
+delete_page(char* path){
+  struct inode *ip, *dp;
+  struct dirent de;
+  char name[DIRSIZ];
+  uint off;
+
+  begin_op();
+  dp = nameiparent(path, name);
+
+  ilock(dp);
+
+  if(namecmp(name, ".") == 0 || namecmp(name, "..") == 0)
+    goto bad;
+
+  if((ip = dirlookup(dp, name, &off)) == 0)
+    goto bad;
+  
+  ilock(ip);
+
+  if(ip->nlink < 1)
+    panic("unlink: nlink < 1");
+
+  memset(&de, 0, sizeof(de));
+  
+  if(writei(dp, (char*)&de, off, sizeof(de)) != sizeof(de))
+    panic("unlink: writei");
+  
+  if(ip->type == T_DIR){
+    dp->nlink--;
+    iupdate(dp);
+  }
+  
+  iunlockput(dp);
+
+  ip->nlink--;
+  iupdate(ip);
+  iunlockput(ip);
+  end_op();
+  return 0;
+
+bad:
+  iunlockput(dp);
+  end_op();
+  return -1;
+}
+
+// Reads the swapout file into the buffer 
+int
+read_page(int pid, uint addr, char *buf){
+  
+  char name[14];
+  get_name(pid, addr, name);
+  
+  int fd = open_file(name, O_RDONLY);   // Open swapout page file
+  struct file *f;
+  if(fd < 0 || fd >= NOFILE || (f=myproc()->ofile[fd]) == 0)
+    return -1;
+  
+  int noc = fileread(f, buf, 4096);     // Read the page into the buffer
+  if(noc < 0)
+    cprintf("Unable to write. Exiting (paging.c::read_page)!!");
+  
+  swapincount++;
+  
+  delete_page(name);
+  myproc()->ofile[fd] = 0;
+  fileclose(f);
+
+  return noc;
+}
+
+// Chooses a victim frame using LRU and evicts it 
+int
+select_victim_evict(int pid){
+  struct proc* p;
+  struct victim victims[4] = {{0,0,0},{0,0,0},{0,0,0},{0,0,0}};
+  pde_t *pte;
+
+  for(p=ptable.proc; p<&ptable.proc[NPROC]; p++){
+      if (p->state == UNUSED || p->state == EMBRYO || p->state == RUNNING || p->pid < 5 || p->pid == pid)
+        continue;
+      
+      for(uint i=PGSIZE; i<p->sz; i+=PGSIZE){
+        pte = (pte_t*)getpte(p->pgdir, (void *) i);
+        if(!((*pte) & PTE_U) || !((*pte) & PTE_P))
+          continue;
+        
+        // 96 = 1100000 in binary
+        int idx = (((*pte)&(uint)96)>>5);
+        if(idx>0 && idx<3)
+          idx = 3-idx;
+        
+        victims[idx].pte = pte;
+        victims[idx].va = i;
+        victims[idx].pr = p;
+      }
+  }
+
+  for(int i=0; i<4; i++){
+    if(victims[i].pte == 0)
+      continue;
+    
+    pte = victims[i].pte;
+    int origstate = victims[i].pr->state;
+    char* origchan = victims[i].pr->chan;
+    victims[i].pr->state = SLEEPING;
+    victims[i].pr->chan = 0;
+    uint reqpte = *pte;
+    *pte = ((*pte) & (~PTE_P)) | ((uint)1<<7);
+    
+    if(victims[i].pr->state != ZOMBIE){
+      release(&swap_out_queue.lock);
+      release(&ptable.lock);
+
+      write_page(victims[i].pr->pid, (victims[i].va)>>12, (void *)P2V(PTE_ADDR(reqpte)));   
+      
+      acquire(&swap_out_queue.lock);
+      acquire(&ptable.lock);
+    }
+
+    kfree((char *)P2V(PTE_ADDR(reqpte)));
+    lcr3(V2P(victims[i].pr->pgdir)); 
+    victims[i].pr->state = origstate;
+    victims[i].pr->chan = origchan;
+    return 1;
+  }
+  return 0;
+}
+
+// Entry point of the swapout process
+void swapout_proc(){
+  sleep(swap_out_queue.qchan, &ptable.lock);
+  while(1){
+    // cprintf("\n\nEntering swapout\n");
+    cprintf("|      Swapout Resumes      |  -  | -  |   Swapout queue is non-empty => start execution   |\n");
+    acquire(&swap_out_queue.lock);
+    
+    while(swap_out_queue.size){
+      // Edge case handling
+      while (flimit >= NOFILE){
+        cprintf("flimit\n");
+        wakeup1(swap_out_queue.reqchan);
+        release(&swap_out_queue.lock);
+        release(&ptable.lock);
+        yield();
+        acquire(&swap_out_queue.lock);
+        acquire(&ptable.lock);
+      }
+
+      // Dequeue process from queue
+      struct proc *p = dequeue(&swap_out_queue);
+
+      // Edge case handling
+      if(!select_victim_evict(p->pid)){
+        wakeup1(swap_out_queue.reqchan);
+        release(&swap_out_queue.lock);
+        release(&ptable.lock);
+        yield();
+        acquire(&swap_out_queue.lock);
+        acquire(&ptable.lock);
+      }
+
+      // When frame found set satified to true
+      p->satisfied = 1;
+    }
+
+    wakeup1(swap_out_queue.reqchan);
+    release(&swap_out_queue.lock);
+    sleep(swap_out_queue.qchan, &ptable.lock);
+  }
+}
+
+// Entry point of the swapin process
+void swapin_proc(){
+  sleep(swap_in_queue.qchan, &ptable.lock);
+  while(1){
+    // cprintf("\n\nEntering swapin\n");
+    cprintf("|      Swapin Resumes       |  -  | -  |   Swapin queue is non-empty => start execution    |\n");
+    acquire(&swap_in_queue.lock);
+    
+    while(swap_in_queue.size){
+      struct proc *p = dequeue(&swap_in_queue);
+      flimit--;
+      release(&swap_in_queue.lock);
+      release(&ptable.lock);
+      
+      char* mem = kalloc();
+      read_page(p->pid,((p->trapva)>>12),mem);
+      
+      acquire(&swap_in_queue.lock);
+      acquire(&ptable.lock);
+
+      swapInMap(p->pgdir, (void *)PGROUNDDOWN(p->trapva),
+                  PGSIZE, V2P(mem));
+      wakeup1(p->chan);
+    }
+    // cprintf("\n\n");
+    release(&swap_in_queue.lock);
+    sleep(swap_in_queue.qchan, &ptable.lock);
+  }
+
+}
+
+
+// Submits a request for a free page to the swapout process
+void req_swapout(){
+  struct proc* p = myproc();
+  // cprintf("Submitted request to swap-out %d\n",p->pid);
+  char my_pid[3];
+  my_pid[2] = 0;
+  my_pid[1] = '0' + p->pid%10;
+  my_pid[0] = (p->pid/10 ? '0' + p->pid/10 : ' ');
+
+  cprintf("| Submit Request to SwapOut |  %s | -  |         Process %s is queued to swapout           |\n", my_pid, my_pid);
+
+  acquire(&ptable.lock);
+
+  acquire(&swap_out_queue.lock);
+  p->satisfied = 0;
+  enqueue(&swap_out_queue, p); // Enqueues the process in the Swapout queue
+  wakeup1(swap_out_queue.qchan); // Wakes up the Swapout process
+  release(&swap_out_queue.lock);
+  while(p->satisfied == 0) // Sleep process till not satisfied 
+    sleep(swap_out_queue.reqchan, &ptable.lock);
+  
+  release(&ptable.lock);
+  return;
+}
+
+// Submits a request to the swapin process
+void req_swapin(){
+  struct proc* p = myproc();
+  // cprintf("submittes request to swap-in %d\n",p->pid);
+  char my_pid[3];
+  my_pid[2] = 0;
+  my_pid[1] = '0' + p->pid%10;
+  my_pid[0] = (p->pid/10 ? '0' + p->pid/10 : ' ');
+  cprintf("| Submit Request to SwapIn  |  %s | -  |         Process %s is queued to swapin            |\n", my_pid, my_pid);
+
+  acquire(&ptable.lock);
+
+  acquire(&swap_in_queue.lock);
+  enqueue(&swap_in_queue, p); // Enqueues the process in the Swapin queue
+  wakeup1(swap_in_queue.qchan); // Wake up the Swapin process
+  release(&swap_in_queue.lock);
+  sleep((char*)p->pid, &ptable.lock); // Suspend the process
+
+  release(&ptable.lock);
+  return;
+}
+
+// On exit delete the swapout page-files created 
+void delete_page_files()
+{
+  struct proc *p;
+
+  acquire(&ptable.lock);
+  
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    if(p->state == UNUSED)
+      continue;
+    
+    if(p->pid==2 || p->pid==3){
+      for(int fd=0; fd<NOFILE; fd++){
+        if(p->ofile[fd]){
+          struct file* f = p->ofile[fd];
+
+          if(f->ref < 1){
+            p->ofile[fd] = 0;
+            continue;
+          }
+
+          release(&ptable.lock);
+          
+          if(f->ref == 1){
+            int i = 0, k = 0;
+            for(i=0; i<14; i++)
+              if(f->name[i] == '_')
+                break;
+            
+            for(k=0; k<14; k++)
+              if(f->name[k] == '.')
+                break;
+            
+            char my_pid[3], my_va[3];
+            my_pid[0] = ((i==2) ? f->name[i-2] : ' ');
+            my_pid[1] = f->name[i-1];
+            my_pid[2] = 0;
+            i++;
+            my_va[0] = ((k-i==2) ? f->name[k-2] : ' ');
+            my_va[1] = f->name[k-1];
+            my_va[2] = 0;
+
+            if(my_va[0] == ' ')
+              cprintf("|    Page File Deletion     |  %s | %s |           Page file %s is deleted           |\n", my_pid, my_va, f->name);
+            else
+              cprintf("|    Page File Deletion     |  %s | %s |           Page file %s is deleted          |\n", my_pid, my_va, f->name);
+          }
+          delete_page(p->ofile[fd]->name);
+          fileclose(f);
+          flimit--;
+          p->ofile[fd] = 0;
+
+          acquire(&ptable.lock);
+        }
+      }
+    }
+  }
+  
+  cprintf("--------------------------------------------------------------------------------------------\n\n");
+  cprintf("Total no. of Swap in: %d\n", swapincount);
+  cprintf("Total no. of Swap out: %d\n", swapoutcount);
+  swapincount = 0;
+  swapoutcount = 0;
+
+  release(&ptable.lock);
+}
+
 void
 pinit(void)
 {
   initlock(&ptable.lock, "ptable");
+  // Initialize swap-out/in queues lock
+  initlock(&swap_out_queue.lock, "swap_out_queue");
+  initlock(&swap_in_queue.lock, "swap_in_queue");
 }
 
 // Must be called with interrupts disabled
@@ -151,6 +779,25 @@
   p->state = RUNNABLE;
 
   release(&ptable.lock);
+
+  // Initialize swap-out queue
+  acquire(&swap_out_queue.lock);
+  swap_out_queue.front = 0;
+  swap_out_queue.rear = NPROC - 1;
+  swap_out_queue.size = 0;
+  swap_out_queue.qchan = swap_out_queue.reqchan = (void*)0xA8080;
+  release(&swap_out_queue.lock);
+
+  // Initialize swap-in queue
+  acquire(&swap_in_queue.lock);
+  swap_in_queue.front = 0;
+  swap_in_queue.rear = NPROC - 1;
+  swap_in_queue.size = 0;
+  swap_in_queue.qchan = swap_in_queue.reqchan = (void*)0xB8081;
+  release(&swap_in_queue.lock);
+
+  // Initialize limit on file
+  flimit = 2;
 }
 
 // Grow current process's memory by n bytes.
@@ -242,6 +889,10 @@
     }
   }
 
+  // If process runs on shell, delete swapped out page files
+  if(curproc->parent && curproc->parent->pid == 4)
+    delete_page_files();
+
   begin_op();
   iput(curproc->cwd);
   end_op();
@@ -407,6 +1058,9 @@
     first = 0;
     iinit(ROOTDEV);
     initlog(ROOTDEV);
+    // Create two kernel processes for swap-in and swap-out as soon as OS boots
+    create_kernel_process("swapinprocess",swapin_proc);
+    create_kernel_process("swapoutprocess",swapout_proc);
   }
 
   // Return to "caller", actually trapret (see allocproc).
diff -ruN xv6-public/proc.h xv6-public-3B/proc.h
--- xv6-public/proc.h	2022-09-03 10:30:31.201341338 +0530
+++ xv6-public-3B/proc.h	2022-10-30 00:55:34.870391814 +0530
@@ -49,6 +49,9 @@
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  // Assign 3
+  int satisfied;               // If zero, page request not satisifed
+  uint trapva;                 // VA at which pagefault occurred
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff -ruN xv6-public/test.c xv6-public-3B/test.c
--- xv6-public/test.c	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-3B/test.c	2022-10-31 22:46:00.815491914 +0530
@@ -0,0 +1,45 @@
+#include "types.h"
+#include "user.h"
+
+#define NUM_CHILD 20
+#define NUM 20
+#define PAGE_SIZE 4096
+
+int main(int argc, char *argv[]){
+
+    printf(1, "--------------------------------------------------------------------------------------------\n");
+    printf(1, "|           Event           | PID | VA |                      Remark                       |\n");
+    printf(1, "--------------------------------------------------------------------------------------------\n");
+
+    for (int i = 1; i <= NUM_CHILD; i++){
+        if (fork() != 0)
+            continue;
+        
+        char *ptr[NUM];
+    
+        // Allocate 4KB to each of the char pointer
+        for(int j = 0; j < NUM; j++)
+            ptr[j] = (char *)malloc(PAGE_SIZE);
+        
+        // Assign values to the allocated memory
+        for (int j = 0; j < NUM; j++){
+            for (int k = 0; k < PAGE_SIZE; k++)
+                ptr[j][k] = (i + j * k) % 128;
+        }
+        
+        // Error detection to check correct fuctioning of our implementation
+        for (int j=0; j < NUM; j++){
+            for (int k=0; k < PAGE_SIZE; k++){
+                if (ptr[j][k] != (i + j * k) % 128)
+                    printf(1, "Error at i = %d, j = %d, k = %d, val = %c\n", i, j, k, ptr[j][k]);
+            }
+        }
+            
+        exit();
+    }
+
+    for (int i = 1; i <= NUM_CHILD; i++)
+        wait();
+    
+    return 0;
+}
\ No newline at end of file
diff -ruN xv6-public/trap.c xv6-public-3B/trap.c
--- xv6-public/trap.c	2022-09-03 10:30:31.205254858 +0530
+++ xv6-public-3B/trap.c	2022-10-31 18:02:52.376767392 +0530
@@ -77,7 +77,16 @@
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
-
+  case T_PGFLT:
+    cprintf("|       Page Fault          |  -  | -  | Page fault has occured due to insufficient memory |\n");
+    pde_t pte = *getpte(myproc()->pgdir,(void *)rcr2());
+    myproc()->trapva = rcr2();
+    if(myproc()->trapva < myproc()->sz && (pte & ((uint)1<<7)) != 0){
+      req_swapin();
+      break;
+    }
+    myproc()->killed = 1;
+    break;
   //PAGEBREAK: 13
   default:
     if(myproc() == 0 || (tf->cs&3) == 0){
diff -ruN xv6-public/vm.c xv6-public-3B/vm.c
--- xv6-public/vm.c	2022-09-03 10:30:31.205254858 +0530
+++ xv6-public-3B/vm.c	2022-10-31 18:02:07.368120408 +0530
@@ -385,6 +385,21 @@
   return 0;
 }
 
+// call walkpgdir with alloc = 0
+pte_t* getpte(pde_t *pgdir, const void *va){
+  return walkpgdir(pgdir,va,0);
+}
+
+// Sets flag bits
+void swapInMap(pde_t *pgdir, void *va, uint size, uint pa){
+  pte_t *pte = getpte(pgdir,va);
+
+  // flags = pte_flags & 0b111111
+  uint flags = PTE_FLAGS(*pte) & (~(1<<6));
+  
+  *pte = pa | flags | PTE_P;
+}
+
 //PAGEBREAK!
 // Blank page.
 //PAGEBREAK!
diff -ruN xv6-public/.vscode/settings.json xv6-public-3B/.vscode/settings.json
--- xv6-public/.vscode/settings.json	1970-01-01 05:30:00.000000000 +0530
+++ xv6-public-3B/.vscode/settings.json	2022-10-31 19:28:06.414340416 +0530
@@ -0,0 +1,5 @@
+{
+    "files.associations": {
+        "stdbool.h": "c"
+    }
+}
\ No newline at end of file
